// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/art-Hasan/gqlgen-todos/ent/schema"
	"github.com/art-Hasan/gqlgen-todos/ent/todo"
	"github.com/art-Hasan/gqlgen-todos/ent/user"

	"github.com/facebookincubator/ent"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	todoMixin := schema.Todo{}.Mixin()
	todoMixinFields := [...][]ent.Field{
		todoMixin[0].Fields(),
	}
	todoFields := schema.Todo{}.Fields()
	_ = todoFields
	// todoDescCreatedAt is the schema descriptor for created_at field.
	todoDescCreatedAt := todoMixinFields[0][0].Descriptor()
	// todo.DefaultCreatedAt holds the default value on creation for the created_at field.
	todo.DefaultCreatedAt = todoDescCreatedAt.Default.(func() time.Time)
	// todoDescUpdatedAt is the schema descriptor for updated_at field.
	todoDescUpdatedAt := todoMixinFields[0][1].Descriptor()
	// todo.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	todo.DefaultUpdatedAt = todoDescUpdatedAt.Default.(func() time.Time)
	// todo.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	todo.UpdateDefaultUpdatedAt = todoDescUpdatedAt.UpdateDefault.(func() time.Time)
	// todoDescText is the schema descriptor for text field.
	todoDescText := todoFields[1].Descriptor()
	// todo.TextValidator is a validator for the "text" field. It is called by the builders before save.
	todo.TextValidator = func() func(string) error {
		validators := todoDescText.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(text string) error {
			for _, fn := range fns {
				if err := fn(text); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// todoDescDone is the schema descriptor for done field.
	todoDescDone := todoFields[2].Descriptor()
	// todo.DefaultDone holds the default value on creation for the done field.
	todo.DefaultDone = todoDescDone.Default.(bool)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescName is the schema descriptor for name field.
	userDescName := userFields[1].Descriptor()
	// user.NameValidator is a validator for the "name" field. It is called by the builders before save.
	user.NameValidator = func() func(string) error {
		validators := userDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
}
